#include <iostream>
#include <vector>
#include <queue>
#include <utility>

using namespace std;

const int INF = 1e9;

typedef pair<int, int> pii;

int n, m, s; // n = number of nodes, m = number of edges, s = source node
vector<pii> adj[10001]; // adjacency list of the graph
vector<int> dist(10001, INF); // distance array, initialized to infinity
priority_queue<pii, vector<pii>, greater<pii>> pq; // min-heap priority queue

void dijkstra(int s) {
    pq.push({0, s}); // push the source node into the priority queue with distance 0
    dist[s] = 0; // the distance from source to itself is 0

    while (!pq.empty()) {
        int u = pq.top().second; // extract the node with the smallest distance
        pq.pop();

        // visit all the neighbors of the extracted node
        for (auto v : adj[u]) {
            if (dist[v.first] > dist[u] + v.second) {
                // if the distance to the neighbor can be improved, update the distance
                dist[v.first] = dist[u] + v.second;
                pq.push({dist[v.first], v.first}); // push the updated distance and node into the priority queue
            }
        }
    }
}

int main() {
    cin >> n >> m >> s; // read in the input

    // read in the edges of the graph
    for (int i = 0; i < m; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        adj[u].push_back({v, w});
    }

    dijkstra(s); // run Dijkstra's algorithm starting from the source node

    // output the shortest distance from the source node to every other node
    for (int i = 1; i <= n; i++) {
        if (dist[i] == INF) {
            cout << "INF ";
        } else {
            cout << dist[i] << " ";
        }
    }

    return 0;
}
This implementation uses a min-heap priority queue to extract the node with the smallest distance and visit its neighbors. The distances to the neighbors are updated if a shorter path is found. The algorithm terminates when all the nodes have been visited or the target node has been reached.




Janani Jana
Write a c++ code to implement kruskal algorithm in graph 

Here's an example implementation of Kruskal's Algorithm in C++ for finding the Minimum Spanning Tree of a weighted undirected graph:

arduino
Copy code
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int MAXN = 10001;

int n, m; // n = number of nodes, m = number of edges
int parent[MAXN]; // parent array for the Union-Find algorithm
vector<pair<int, pair<int, int>>> edges; // vector of edges in the graph, each edge is a pair of weight and pair of nodes

int find(int x) {
    if (parent[x] == x) {
        return x;
    } else {
        return parent[x] = find(parent[x]);
    }
}

void merge(int x, int y) {
    parent[find(x)] = find(y);
}

int kruskal() {
    int cost = 0; // the total weight of the MST
    sort(edges.begin(), edges.end()); // sort the edges in increasing order of weight

    // initialize the parent array for the Union-Find algorithm
    for (int i = 1; i <= n; i++) {
        parent[i] = i;
    }

    // iterate through the sorted edges and add them to the MST if they do not form a cycle
    for (auto e : edges) {
        int w = e.first;
        int u = e.second.first;
        int v = e.second.second;

        if (find(u) != find(v)) {
            merge(u, v);
            cost += w;
        }
    }

    return cost;
}

int main() {
    cin >> n >> m; // read in the input

    // read in the edges of the graph
    for (int i = 0; i < m; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        edges.push_back({w, {u, v}});
    }

    int cost = kruskal(); // run Kruskal's algorithm to find the MST

    cout << cost << endl; // output the total weight of the MST

    return 0;
}
This implementation uses the Union-Find algorithm to keep track of the connected components in the graph. The edges are sorted in increasing order of weight, and each edge is added to the MST if it does not form a cycle with the edges already in the MST. The algorithm terminates when all the nodes are in the same connected component, or when the MST has n-1 edges.




Janani Jana
Write a c++ code prim algorithm in graph

Here's an example implementation of Prim's Algorithm in C++ for finding the Minimum Spanning Tree of a weighted undirected graph:

arduino
Copy code
#include <iostream>
#include <vector>
#include <queue>
#include <utility>

using namespace std;

const int MAXN = 10001;

int n, m; // n = number of nodes, m = number of edges
vector<pair<int, int>> adj[MAXN]; // adjacency list of the graph, each edge is a pair of weight and node
bool visited[MAXN]; // array to keep track of the nodes that have been visited
int dist[MAXN]; // array to keep track of the distances to the nodes in the MST
priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; // min-heap priority queue

int prim(int s) {
    int cost = 0; // the total weight of the MST
    pq.push({0, s}); // push the source node into the priority queue with distance 0
    dist[s] = 0; // the distance from source to itself is 0

    while (!pq.empty()) {
        int u = pq.top().second; // extract the node with the smallest distance
        pq.pop();

        if (visited[u]) {
            continue;
        }

        visited[u] = true; // mark the node as visited

        cost += dist[u]; // add the distance to the MST

        // visit all the neighbors of the extracted node
        for (auto v : adj[u]) {
            if (!visited[v.first] && dist[v.first] > v.second) {
                // if the distance to the neighbor can be improved, update the distance
                dist[v.first] = v.second;
                pq.push({dist[v.first], v.first}); // push the updated distance and node into the priority queue
            }
        }
    }

    return cost;
}

int main() {
    cin >> n >> m; // read in the input

    // read in the edges of the graph
    for (int i = 0; i < m; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        adj[u].push_back({v, w});
        adj[v].push_back({u, w});
    }

    // initialize the distances to infinity
    for (int i = 1; i <= n; i++) {
        dist[i] = 1e9;
    }

    int cost = prim(1); // run Prim's algorithm starting from the first node

    cout << cost << endl; // output the total weight of the MST

    return 0;
}
